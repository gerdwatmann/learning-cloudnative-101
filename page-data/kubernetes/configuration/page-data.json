{"componentChunkName":"component---src-pages-kubernetes-configuration-index-mdx","path":"/kubernetes/configuration/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Configuration","description":"Configuration of Kubernetes"},"relativePagePath":"/kubernetes/configuration/index.mdx","titleType":"page","MdxNode":{"id":"efaac29d-f3c7-5606-8bf7-cdecab70f28d","children":[],"parent":"e29fc87e-118c-5481-8463-965ce215d7b1","internal":{"content":"---\ntitle: Kubernetes Configuration\ndescription: Configuration of Kubernetes\n---\n\n<AnchorLinks>\n  <AnchorLink>Container Configuration</AnchorLink>\n  <AnchorLink>Resource Requirements</AnchorLink>\n  <AnchorLink>ConfigMaps</AnchorLink>\n  <AnchorLink>Secrets</AnchorLink>\n  <AnchorLink>SecurityContexts</AnchorLink>\n  <AnchorLink>Service Accounts</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n# Container Configuration\n\n**Command and Argument**\n\nWhen you create a Pod, you can define a command and arguments for the containers that run in the Pod.\n\nThe command and arguments that you define in the configuration file override the default command and arguments provided by the container image\n\nDockerfile vs Kubernetes\nDockerfile Entrypoint -> k8s command\nDockerfile CMD -> k8s args\n\n**Ports**\n\nWhen you create a Pod, you can specify the port number the container exposes, as best practice is good to put a `name`, this way a service can specify targetport by name reference.\n\n**Environment Variable**\n\nWhen you create a Pod, you can set environment variables for the containers that run in the Pod. To set environment variables, include the env or envFrom field in the container configuration\n\nA Pod can use environment variables to expose information about itself to Containers running in the Pod. Environment variables can expose Pod fields and Container fields\n\n## Resources\n- https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/\n- https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/\n- https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#exposing-pods-to-the-cluster\n- https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/\n\n\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-cmd-pod\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['echo']\n  restartPolicy: Never\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-arg-pod\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['echo']\n    args: ['Hello World']\n  restartPolicy: Never\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-port-pod\nspec:\n  containers:\n  - name: myapp-container\n    image: bitnami/nginx\n    ports:\n    - containerPort: 8080\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-env-pod\nspec:\n  restartPolicy: Never\n  containers:\n  - name: c\n    image: busybox\n    env:\n    - name: DEMO_GREETING\n      value: \"Hello from the environment\"\n    command: [\"echo\"]\n    args: [\"$(DEMO_GREETING)\"]\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-inter-pod\n  labels:\n    app: jedi\nspec:\n  restartPolicy: Never\n  containers:\n    - name: myapp\n      image: busybox\n      ports:\n        - containerPort: 8080\n          name: http\n      env:\n        - name: MY_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: MY_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n      command: [\"echo\"]\n      args: [\"$(MY_NODE_NAME) $(MY_POD_NAME) $(MY_POD_IP)\"]\n```\n\n# Resource Requirements\n\nWhen you specify a Pod, you can optionally specify how much CPU and memory (RAM) each Container needs. When Containers have resource requests specified, the scheduler can make better decisions about which nodes to place Pods on.\n\nCPU and memory are each a resource type. A resource type has a base unit. CPU is specified in units of cores, and memory is specified in units of bytes.\n\n## Resources\n- https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container\n- https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/\n\n\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-app\n    image: bitnami/nginx\n    ports:\n      - containerPort: 8080\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"250m\"\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n```\n\n\nNamespaced defaults mem\n```yaml\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\nspec:\n  limits:\n  - default:\n      memory: 512Mi\n    defaultRequest:\n      memory: 256Mi\n    type: Container\n```\n\nNamespaced defaults mem\n```yaml\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: cpu-limit-range\nspec:\n  limits:\n  - default:\n      cpu: 1\n    defaultRequest:\n      cpu: 0.5\n    type: Container\n```\n\n# ConfigMaps\n\nConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable.\n\nYou can data from a ConfigMap in 3 different ways.\n- As a single environment variable specific to a single key\n- As a set of environment variables from all keys\n- As a set of files, each key represented by a file on mounted volume\n\n## Resources\n- https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/\n\n## References\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: my-cm\ndata:\n   color: blue\n   location: naboo\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: myapp\n      image: busybox\n      command: [\"echo\"]\n      args: [\"color is $(MY_VAR)\"]\n      env:\n        - name: MY_VAR\n          valueFrom:\n            configMapKeyRef:\n              name: my-cm\n              key: color\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: myapp\n      image: busybox\n      command:\n        [\n          \"sh\",\n          \"-c\",\n          \"ls -l /etc/config; echo located at $(cat /etc/config/location)\",\n        ]\n      volumeMounts:\n        - name: config-volume\n          mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: my-cm\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: myapp\n      image: busybox\n      command: [\"/bin/sh\", \"-c\", \"env | sort\"]\n      envFrom:\n        - configMapRef:\n            name: my-cm\n  restartPolicy: Never\n```\n\n# Secrets\n\nKubernetes secret objects let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys. Putting this information in a secret is safer and more flexible than putting it verbatim in a Pod definition or in a container image.\n\nA Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key. Such information might otherwise be put in a Pod specification or in an image; putting it in a Secret object allows for more control over how it is used, and reduces the risk of accidental exposure.\n\n\n## Resources\n- https://kubernetes.io/docs/concepts/configuration/secret/\n- https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/\n\n\n## References\n\n```\n# Create files needed for rest of example.\necho -n 'admin' > ./username.txt\necho -n '1f2d1e2e67df' > ./password.txt\n```\n\n```\nkubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt\n```\n\n```\nkubectl get secrets\nkubectl describe secrets/db-user-pass\n```\n\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  username: YWRtaW4=\nstringData:\n  admin: administrator\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret-config\ntype: Opaque\nstringData:\n  config.yaml: |-\n    apiUrl: \"https://my.api.com/api/v1\"\n    username: token\n    password: thesecrettoken\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-app\n    image: bitnami/nginx\n    ports:\n      - containerPort: 8080\n    env:\n      - name: SECRET_USERNAME\n        valueFrom:\n          secretKeyRef:\n            name: mysecret\n            key: username\n    envFrom:\n      - secretRef:\n          name: mysecret\n    volumeMounts:\n      - name: config\n        mountPath: \"/etc/secrets\"\n  volumes:\n    - name: config\n      secret:\n        secretName: mysecret-config\n```\n\n# SecurityContexts\n\nA security context defines privilege and access control settings for a Pod or Container.\n\nTo specify security settings for a Pod, include the securityContext field in the Pod specification. The securityContext field is a PodSecurityContext object. The security settings that you specify for a Pod apply to all Containers in the Pod.\n\n## Resources\n- https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n\n\n## References\n\nSetup minikube VM with users\n```\nminikube ssh\n```\n```\nsu -\n```\n```\necho \"container-user-0:x:2000:2000:-:/home/container-user-0:/bin/bash\" >> /etc/passwd\necho \"container-user-1:x:2001:2001:-:/home/container-user-1:/bin/bash\" >> /etc/passwd\necho \"container-group-0:x:3000:\" >>/etc/group\necho \"container-group-1:x:3001:\" >>/etc/group\nmkdir -p /etc/message/\necho \"Hello, World!\" | sudo tee -a /etc/message/message.txt\nchown 2000:3000 /etc/message/message.txt\nchmod 640 /etc/message/message.txt\n```\n\n\nUsing the this `securityContext` the container will be able to read the file `/message/message.txt`\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-securitycontext-pod\nspec:\n  securityContext:\n    runAsUser: 2000\n    runAsGroup: 3000\n    fsGroup: 3000\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"cat /message/message.txt && sleep 3600\"]\n      volumeMounts:\n        - name: message-volume\n          mountPath: /message\n  volumes:\n    - name: message-volume\n      hostPath:\n        path: /etc/message\n```\n\nUsing the this `securityContext` the container should NOT be able to read the file `/message/message.txt`\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-securitycontext-pod\nspec:\n  securityContext:\n    runAsUser: 2001\n    runAsGroup: 3001\n    fsGroup: 3001\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"cat /message/message.txt && sleep 3600\"]\n      volumeMounts:\n        - name: message-volume\n          mountPath: /message\n  volumes:\n    - name: message-volume\n      hostPath:\n        path: /etc/message\n```\nRun to see the errors\n```bash\nkubectl logs my-securitycontext-pod\n```\n```\ncat: can't open '/message/message.txt': Permission denied\n```\n\n\n# Service Accounts\n\nA service account provides an identity for processes that run in a Pod.\n\nWhen you (a human) access the cluster (for example, using kubectl), you are authenticated by the apiserver as a particular User Account (currently this is usually admin, unless your cluster administrator has customized your cluster). Processes in containers inside pods can also contact the apiserver. When they do, they are authenticated as a particular Service Account (for example, default).\n\nUser accounts are for humans. Service accounts are for processes, which run in pods.\n\nUser accounts are intended to be global. Names must be unique across all namespaces of a cluster, future user resource will not be namespaced. Service accounts are namespaced.\n\n## Resources\nhttps://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n\n## References\n\n```\nkubectl create sa my-service-account\n```\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-service-account\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  serviceAccountName: my-service-account\n  containers:\n  - name: my-app\n    image: bitnami/nginx\n    ports:\n      - containerPort: 8080\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: build-robot-secret\n  annotations:\n    kubernetes.io/service-account.name: my-service-account\ntype: kubernetes.io/service-account-token\n```\n\n## Activities\n\n| Task                            | Description         | Link        |\n| --------------------------------| ------------------  |:----------- |\n| *** Try It Yourself ***                         |         |         |\n| Pod Creation | Challenge yourself to create a Pod YAML file to meet certain parameters. | [Pod Creation](../activities/labs/lab1) |\n| Pod Configuration | Configure a pod to meet compute resource requirements. | [Pod Configuration](../activities/labs/lab2) |\n","type":"Mdx","contentDigest":"710fe4c309e6dfb54e6d086800431fc5","counter":292,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Kubernetes Configuration","description":"Configuration of Kubernetes"},"exports":{},"rawBody":"---\ntitle: Kubernetes Configuration\ndescription: Configuration of Kubernetes\n---\n\n<AnchorLinks>\n  <AnchorLink>Container Configuration</AnchorLink>\n  <AnchorLink>Resource Requirements</AnchorLink>\n  <AnchorLink>ConfigMaps</AnchorLink>\n  <AnchorLink>Secrets</AnchorLink>\n  <AnchorLink>SecurityContexts</AnchorLink>\n  <AnchorLink>Service Accounts</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n# Container Configuration\n\n**Command and Argument**\n\nWhen you create a Pod, you can define a command and arguments for the containers that run in the Pod.\n\nThe command and arguments that you define in the configuration file override the default command and arguments provided by the container image\n\nDockerfile vs Kubernetes\nDockerfile Entrypoint -> k8s command\nDockerfile CMD -> k8s args\n\n**Ports**\n\nWhen you create a Pod, you can specify the port number the container exposes, as best practice is good to put a `name`, this way a service can specify targetport by name reference.\n\n**Environment Variable**\n\nWhen you create a Pod, you can set environment variables for the containers that run in the Pod. To set environment variables, include the env or envFrom field in the container configuration\n\nA Pod can use environment variables to expose information about itself to Containers running in the Pod. Environment variables can expose Pod fields and Container fields\n\n## Resources\n- https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/\n- https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/\n- https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#exposing-pods-to-the-cluster\n- https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/\n\n\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-cmd-pod\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['echo']\n  restartPolicy: Never\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-arg-pod\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['echo']\n    args: ['Hello World']\n  restartPolicy: Never\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-port-pod\nspec:\n  containers:\n  - name: myapp-container\n    image: bitnami/nginx\n    ports:\n    - containerPort: 8080\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-env-pod\nspec:\n  restartPolicy: Never\n  containers:\n  - name: c\n    image: busybox\n    env:\n    - name: DEMO_GREETING\n      value: \"Hello from the environment\"\n    command: [\"echo\"]\n    args: [\"$(DEMO_GREETING)\"]\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-inter-pod\n  labels:\n    app: jedi\nspec:\n  restartPolicy: Never\n  containers:\n    - name: myapp\n      image: busybox\n      ports:\n        - containerPort: 8080\n          name: http\n      env:\n        - name: MY_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: MY_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n      command: [\"echo\"]\n      args: [\"$(MY_NODE_NAME) $(MY_POD_NAME) $(MY_POD_IP)\"]\n```\n\n# Resource Requirements\n\nWhen you specify a Pod, you can optionally specify how much CPU and memory (RAM) each Container needs. When Containers have resource requests specified, the scheduler can make better decisions about which nodes to place Pods on.\n\nCPU and memory are each a resource type. A resource type has a base unit. CPU is specified in units of cores, and memory is specified in units of bytes.\n\n## Resources\n- https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container\n- https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/\n\n\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-app\n    image: bitnami/nginx\n    ports:\n      - containerPort: 8080\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"250m\"\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n```\n\n\nNamespaced defaults mem\n```yaml\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\nspec:\n  limits:\n  - default:\n      memory: 512Mi\n    defaultRequest:\n      memory: 256Mi\n    type: Container\n```\n\nNamespaced defaults mem\n```yaml\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: cpu-limit-range\nspec:\n  limits:\n  - default:\n      cpu: 1\n    defaultRequest:\n      cpu: 0.5\n    type: Container\n```\n\n# ConfigMaps\n\nConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable.\n\nYou can data from a ConfigMap in 3 different ways.\n- As a single environment variable specific to a single key\n- As a set of environment variables from all keys\n- As a set of files, each key represented by a file on mounted volume\n\n## Resources\n- https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/\n\n## References\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: my-cm\ndata:\n   color: blue\n   location: naboo\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: myapp\n      image: busybox\n      command: [\"echo\"]\n      args: [\"color is $(MY_VAR)\"]\n      env:\n        - name: MY_VAR\n          valueFrom:\n            configMapKeyRef:\n              name: my-cm\n              key: color\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: myapp\n      image: busybox\n      command:\n        [\n          \"sh\",\n          \"-c\",\n          \"ls -l /etc/config; echo located at $(cat /etc/config/location)\",\n        ]\n      volumeMounts:\n        - name: config-volume\n          mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: my-cm\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: myapp\n      image: busybox\n      command: [\"/bin/sh\", \"-c\", \"env | sort\"]\n      envFrom:\n        - configMapRef:\n            name: my-cm\n  restartPolicy: Never\n```\n\n# Secrets\n\nKubernetes secret objects let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys. Putting this information in a secret is safer and more flexible than putting it verbatim in a Pod definition or in a container image.\n\nA Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key. Such information might otherwise be put in a Pod specification or in an image; putting it in a Secret object allows for more control over how it is used, and reduces the risk of accidental exposure.\n\n\n## Resources\n- https://kubernetes.io/docs/concepts/configuration/secret/\n- https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/\n\n\n## References\n\n```\n# Create files needed for rest of example.\necho -n 'admin' > ./username.txt\necho -n '1f2d1e2e67df' > ./password.txt\n```\n\n```\nkubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt\n```\n\n```\nkubectl get secrets\nkubectl describe secrets/db-user-pass\n```\n\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  username: YWRtaW4=\nstringData:\n  admin: administrator\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret-config\ntype: Opaque\nstringData:\n  config.yaml: |-\n    apiUrl: \"https://my.api.com/api/v1\"\n    username: token\n    password: thesecrettoken\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-app\n    image: bitnami/nginx\n    ports:\n      - containerPort: 8080\n    env:\n      - name: SECRET_USERNAME\n        valueFrom:\n          secretKeyRef:\n            name: mysecret\n            key: username\n    envFrom:\n      - secretRef:\n          name: mysecret\n    volumeMounts:\n      - name: config\n        mountPath: \"/etc/secrets\"\n  volumes:\n    - name: config\n      secret:\n        secretName: mysecret-config\n```\n\n# SecurityContexts\n\nA security context defines privilege and access control settings for a Pod or Container.\n\nTo specify security settings for a Pod, include the securityContext field in the Pod specification. The securityContext field is a PodSecurityContext object. The security settings that you specify for a Pod apply to all Containers in the Pod.\n\n## Resources\n- https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n\n\n## References\n\nSetup minikube VM with users\n```\nminikube ssh\n```\n```\nsu -\n```\n```\necho \"container-user-0:x:2000:2000:-:/home/container-user-0:/bin/bash\" >> /etc/passwd\necho \"container-user-1:x:2001:2001:-:/home/container-user-1:/bin/bash\" >> /etc/passwd\necho \"container-group-0:x:3000:\" >>/etc/group\necho \"container-group-1:x:3001:\" >>/etc/group\nmkdir -p /etc/message/\necho \"Hello, World!\" | sudo tee -a /etc/message/message.txt\nchown 2000:3000 /etc/message/message.txt\nchmod 640 /etc/message/message.txt\n```\n\n\nUsing the this `securityContext` the container will be able to read the file `/message/message.txt`\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-securitycontext-pod\nspec:\n  securityContext:\n    runAsUser: 2000\n    runAsGroup: 3000\n    fsGroup: 3000\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"cat /message/message.txt && sleep 3600\"]\n      volumeMounts:\n        - name: message-volume\n          mountPath: /message\n  volumes:\n    - name: message-volume\n      hostPath:\n        path: /etc/message\n```\n\nUsing the this `securityContext` the container should NOT be able to read the file `/message/message.txt`\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-securitycontext-pod\nspec:\n  securityContext:\n    runAsUser: 2001\n    runAsGroup: 3001\n    fsGroup: 3001\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"cat /message/message.txt && sleep 3600\"]\n      volumeMounts:\n        - name: message-volume\n          mountPath: /message\n  volumes:\n    - name: message-volume\n      hostPath:\n        path: /etc/message\n```\nRun to see the errors\n```bash\nkubectl logs my-securitycontext-pod\n```\n```\ncat: can't open '/message/message.txt': Permission denied\n```\n\n\n# Service Accounts\n\nA service account provides an identity for processes that run in a Pod.\n\nWhen you (a human) access the cluster (for example, using kubectl), you are authenticated by the apiserver as a particular User Account (currently this is usually admin, unless your cluster administrator has customized your cluster). Processes in containers inside pods can also contact the apiserver. When they do, they are authenticated as a particular Service Account (for example, default).\n\nUser accounts are for humans. Service accounts are for processes, which run in pods.\n\nUser accounts are intended to be global. Names must be unique across all namespaces of a cluster, future user resource will not be namespaced. Service accounts are namespaced.\n\n## Resources\nhttps://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n\n## References\n\n```\nkubectl create sa my-service-account\n```\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-service-account\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  serviceAccountName: my-service-account\n  containers:\n  - name: my-app\n    image: bitnami/nginx\n    ports:\n      - containerPort: 8080\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: build-robot-secret\n  annotations:\n    kubernetes.io/service-account.name: my-service-account\ntype: kubernetes.io/service-account-token\n```\n\n## Activities\n\n| Task                            | Description         | Link        |\n| --------------------------------| ------------------  |:----------- |\n| *** Try It Yourself ***                         |         |         |\n| Pod Creation | Challenge yourself to create a Pod YAML file to meet certain parameters. | [Pod Creation](../activities/labs/lab1) |\n| Pod Configuration | Configure a pod to meet compute resource requirements. | [Pod Configuration](../activities/labs/lab2) |\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/kubernetes/configuration/index.mdx"}}}}