{"componentChunkName":"component---src-pages-kubernetes-core-concepts-index-mdx","path":"/kubernetes/core-concepts/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Core Concepts","description":"Core Concepts of Kubernetes"},"relativePagePath":"/kubernetes/core-concepts/index.mdx","titleType":"page","MdxNode":{"id":"2a844f2f-cbca-5cad-aa5b-589b5b9701c2","children":[],"parent":"f9b206e3-c4fb-5210-b9ca-9eb685323508","internal":{"content":"---\ntitle: Kubernetes Core Concepts\ndescription: Core Concepts of Kubernetes\n---\n\n<AnchorLinks>\n  <AnchorLink>Kubernetes API Primitives</AnchorLink>\n  <AnchorLink>Creating Pods</AnchorLink>\n  <AnchorLink>Namespaces</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n\n# Kubernetes API Primitives\n\nKubernetes API primitive, also known as Kubernetes objects, are the basic building blocks of any application running in Kubernetes\n\nExamples:\n- Pod\n- Node\n- Service\n- ServiceAccount\n\nTwo primary members\n- Spec, desired state\n- Status, current state\n\n## Resources\n- https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/\n- https://kubernetes.io/docs/tutorials/kubernetes-basics/\n\n\n## References\n```\nkubectl api-resources\nkubectl api-resources -o wide\nkubectl api-resources -o name\n\nkubectl get nodes,ns,po,deploy,svc\n\nkubectl describe node --all\n```\n\n# Creating Pods\nA Pod is the basic execution unit of a Kubernetes application–the smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents processes running on your Cluster.\n\nA Pod encapsulates an application’s container (or, in some cases, multiple containers), storage resources, a unique network IP, and options that govern how the container(s) should run. A Pod represents a unit of deployment: a single instance of an application in Kubernetes, which might consist of either a single container or a small number of containers that are tightly coupled and that share resources.\n\n## Resources\n- https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']\n```\n\n```\nkubectl create -f pod.yaml\n# update label\nkubectl apply -f pod.yaml\n# update label\nkubectl edit pod myapp-pod\nkubectl delete pod myapp-pod\n```\n\n\n# Namespaces\n\nNamespaces are intended for use in environments with many users spread across multiple teams, or projects.\n\nNamespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces.\n\nNamespaces are a way to divide cluster resources between multiple users (via resource quota).\n\nIt is not necessary to use multiple namespaces just to separate slightly different resources, such as different versions of the same software: use labels to distinguish resources within the same namespace. In practice namespaces are used to deploy different versions based on stages of the CICD pipeline (dev, test, stage, prod)\n\n## Resources:\n- https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n\n## References:\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: foo\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  namespace: bar\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']\n```\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n```\n  oc get projects\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n```\n  kubectl get namespaces\n\n  kubectl create ns bar\n\n  kubens\n\n  kubectl set-context --current --namespace=bar\n\n  # Not in a namespace\n  kubectl api-resources --namespaced=false\n```\n\n</Tab>\n\n</Tabs>\n","type":"Mdx","contentDigest":"296819bd30c7a491a57adcb658de0588","counter":272,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Kubernetes Core Concepts","description":"Core Concepts of Kubernetes"},"exports":{},"rawBody":"---\ntitle: Kubernetes Core Concepts\ndescription: Core Concepts of Kubernetes\n---\n\n<AnchorLinks>\n  <AnchorLink>Kubernetes API Primitives</AnchorLink>\n  <AnchorLink>Creating Pods</AnchorLink>\n  <AnchorLink>Namespaces</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n\n# Kubernetes API Primitives\n\nKubernetes API primitive, also known as Kubernetes objects, are the basic building blocks of any application running in Kubernetes\n\nExamples:\n- Pod\n- Node\n- Service\n- ServiceAccount\n\nTwo primary members\n- Spec, desired state\n- Status, current state\n\n## Resources\n- https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/\n- https://kubernetes.io/docs/tutorials/kubernetes-basics/\n\n\n## References\n```\nkubectl api-resources\nkubectl api-resources -o wide\nkubectl api-resources -o name\n\nkubectl get nodes,ns,po,deploy,svc\n\nkubectl describe node --all\n```\n\n# Creating Pods\nA Pod is the basic execution unit of a Kubernetes application–the smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents processes running on your Cluster.\n\nA Pod encapsulates an application’s container (or, in some cases, multiple containers), storage resources, a unique network IP, and options that govern how the container(s) should run. A Pod represents a unit of deployment: a single instance of an application in Kubernetes, which might consist of either a single container or a small number of containers that are tightly coupled and that share resources.\n\n## Resources\n- https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']\n```\n\n```\nkubectl create -f pod.yaml\n# update label\nkubectl apply -f pod.yaml\n# update label\nkubectl edit pod myapp-pod\nkubectl delete pod myapp-pod\n```\n\n\n# Namespaces\n\nNamespaces are intended for use in environments with many users spread across multiple teams, or projects.\n\nNamespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces.\n\nNamespaces are a way to divide cluster resources between multiple users (via resource quota).\n\nIt is not necessary to use multiple namespaces just to separate slightly different resources, such as different versions of the same software: use labels to distinguish resources within the same namespace. In practice namespaces are used to deploy different versions based on stages of the CICD pipeline (dev, test, stage, prod)\n\n## Resources:\n- https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n\n## References:\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: foo\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  namespace: bar\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']\n```\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n```\n  oc get projects\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n```\n  kubectl get namespaces\n\n  kubectl create ns bar\n\n  kubens\n\n  kubectl set-context --current --namespace=bar\n\n  # Not in a namespace\n  kubectl api-resources --namespaced=false\n```\n\n</Tab>\n\n</Tabs>\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/kubernetes/core-concepts/index.mdx"}}}}